{"version":3,"sources":["components/Card/Card.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","quotes","tempQuote","tempAuthor","isLoading","error","displayQuote","bind","assertThisInitialized","_this2","setState","fetch","then","response","ok","json","Error","data","catch","index","parseInt","Math","random","quote","author","react_default","a","createElement","message","className","id","onClick","href","data-show-count","async","src","charSet","Component","App","components_Card_Card","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gRAqFeA,sBA9Eb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CAEXC,OAAQ,GACRC,UAAW,iEACXC,WAAY,kBAEZC,WAAW,EACXC,MAAO,MAITZ,EAAKa,aAAeb,EAAKa,aAAaC,KAAlBb,OAAAc,EAAA,EAAAd,QAAAc,EAAA,EAAAd,CAAAD,KAdHA,mFAkBC,IAAAgB,EAAAb,KAClBA,KAAKc,SAAS,CAAEN,WAAW,IAE3BO,MAxBQ,oCA0BLC,KAAK,SAAAC,GACJ,GAAIA,EAASC,GAEX,OAAOD,EAASE,OAGhB,MAAM,IAAIC,MAAM,8BAInBJ,KAAK,SAAAK,GAAI,OAAIR,EAAKC,SAAS,CAAET,OAAQgB,EAAMb,WAAW,MAEtDc,MAAM,SAAAb,GAAK,OAAII,EAAKC,SAAS,CAAEL,QAAOD,WAAW,6CAMpD,IAAMe,EAAQC,SAAyB,IAAhBC,KAAKC,UAG5B1B,KAAKc,SAAS,CAGZR,UAAWN,KAAKI,MAAMC,OAAOkB,GAAOI,MACpCpB,WAAYP,KAAKI,MAAMC,OAAOkB,GAAOK,0CAQvC,OAAI5B,KAAKS,MACAoB,EAAAC,EAAAC,cAAA,SAAI/B,KAAKS,MAAMuB,SAIpBhC,KAAKQ,UACAqB,EAAAC,EAAAC,cAAA,wBAIPF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACbJ,EAAAC,EAAAC,cAAA,KAAGG,GAAG,QAAQlC,KAAKI,MAAME,WACzBuB,EAAAC,EAAAC,cAAA,KAAGG,GAAG,UAASL,EAAAC,EAAAC,cAAA,YAAO/B,KAAKI,MAAMG,aACjCsB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACbJ,EAAAC,EAAAC,cAAA,UAAQG,GAAG,YAAYC,QAASnC,KAAKU,cAArC,aACAmB,EAAAC,EAAAC,cAAA,KAAGK,KAAK,4EAA4EF,GAAG,cAAcG,kBAAgB,SAArH,gBAA6IR,EAAAC,EAAAC,cAAA,UAAQO,OAAK,EAACC,IAAI,0CAA0CC,QAAQ,mBAxExMC,cCWJC,mLARX,OACEb,EAAAC,EAAAC,cAAA,OAAKE,UAAU,MAAMC,GAAG,aACtBL,EAAAC,EAAAC,cAACY,EAAD,cANUF,aCOEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,KAAK,SAAAyC,GACjCA,EAAaC","file":"static/js/main.e7c71bdc.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Card.scss';\n\n// Creating a const with our API url\nconst API = 'https://talaikis.com/api/quotes/';\n\nclass Card extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      // By setting quotes to an empty array, we avoid running into any null pointer exceptions\n      quotes: [],\n      tempQuote: 'There is nothing that fear and hope does not permit men to do.',\n      tempAuthor: 'Luc de Clapiers',\n      // the loading state should be used to indicate that an asynchronous request is happening.\n      isLoading: false,\n      error: null\n    };\n\n    // all methods need to be bind within the constructor\n    this.displayQuote = this.displayQuote.bind(this);\n  }\n\n  // this is the lifecycle method to fetch data\n  componentDidMount() {\n    this.setState({ isLoading: true });\n\n    fetch(API)\n\n      .then(response => {\n        if (response.ok) {\n          // We define the format of the data from the api that we wish to receive\n          return response.json();\n          // if our response does not match our expected data.\n        } else {\n          throw new Error('Something went wrong ...');\n        }\n      })\n      // When the data is fetched successfully, it will be stored in the local state. We also toggle the property of isLoading from true to false\n      .then(data => this.setState({ quotes: data, isLoading: false}))\n      // When using promises, the catch() block is usually used after the then() block to handle errors.\n      .catch(error => this.setState({ error, isLoading: false }));\n  }\n\n  // this function contains the data about to be displayed\n  displayQuote() {\n    // Creating a random whole number as index to my quotes array between 0 and 100\n    const index = parseInt(Math.random() * 101);\n\n    // Changing the temp local state values everytime displayQuote is called\n    this.setState({\n      // quote and author are both names from JSON data\n      // temp... will be set to the names/value\n      tempQuote: this.state.quotes[index].quote,\n      tempAuthor: this.state.quotes[index].author\n    });\n\n  };\n\n  render () {\n\n    // Show the error message of erroneous status code.\n    if (this.error){\n      return <p>{this.error.message}</p>\n    };\n\n    // If the resolved data is not ready, display loading\n    if (this.isLoading){\n      return <p>Loading ...</p>\n    };\n\n    return (\n      <div className=\"App-card\">\n        <q id=\"text\">{this.state.tempQuote}</q>\n        <p id=\"author\"><span>{this.state.tempAuthor}</span></p>\n        <div className=\"App-card-footer\">\n          <button id=\"new-quote\" onClick={this.displayQuote}>new quote</button>\n          <a href=\"https://twitter.com/intent/tweet?button_hashtag=share&ref_src=twsrc%5Etfw\" id=\"tweet-quote\" data-show-count=\"false\">Tweet #share</a><script async src=\"https://platform.twitter.com/widgets.js\" charSet=\"utf-8\"></script>\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default Card;\n","import React, { Component } from 'react';\nimport './App.scss';\nimport Card from './components/Card/Card';\n\n\nclass App extends Component {\n\n  render() {\n\n    return (\n      <div className=\"App\" id=\"quote-box\">\n        <Card />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// source: https://github.com/facebook/create-react-app/blob/master/packages/react-app-polyfill/README.md\nimport 'react-app-polyfill/ie9';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}